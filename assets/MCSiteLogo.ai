%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 24.0.1
%%For: (Michael's Razer) ()
%%Title: (MCSiteLogo.ai)
%%CreationDate: 5/18/2020 12:24 PM
%%Canvassize: 16383
%%BoundingBox: 14 593 1066 1255
%%HiResBoundingBox: 14.6061 593.1252 1065.3939 1254.2398
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 540.5 922.7398 540.5 922.7398
%AI3_TileBox: 144 617.6825 936 1229.6825
%AI3_DocumentPreview: None
%AI5_ArtSize: 1080 661.1147
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -1773.5319 1492.4255 0.489583 1490 952 18 0 0 -1842 93 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 84 8
%%BeginData: 6415 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD59FFA8A8525227FD08F827277D7DFD16FF7DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA8FD26FF7DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA8FD08FFA87D27FD12F82752A8FD12FFFD14F8A8FD24FF52FD13F8
%27FD06FFA827FD18F82752FD10FFFD14F852FD23FFA827FD13F827A8FFFF
%FF7D27FD1DF87DA8FD0DFFFD14F827FD23FFA8FD14F827FFFFFF52FD20F8
%277DFD0CFFFD15F8A8FD22FF52FD14F827FFA8FD24F852FD0BFFFD15F852
%FD22FF27FD14F8277DFD26F827FD0AFFFD15F827FD21FFA8FD3FF8A8FD08
%FFFD16F8A8FD20FF52FD40F8FD08FFFD16F852FD20FF27FD41F8FD07FFFD
%16F827FD1FFFA8FD42F827FD06FFFD17F8A8FD1EFF52FD43F852FD05FFFD
%17F852FD1EFF27FD44F8A8FD04FFFD17F827FD1DFFA8FD29F82727522752
%2727FD15F852FD04FFFD18F8A8FD1CFF52FD26F87DA8FD08FFA87D52FD13
%F8A8FFFFFFFD18F852FD1BFFA827FD24F852FD0EFFA827FD11F827FFFFFF
%FD18F827FD1BFFA8FD23F827A8FD11FF7DFD11F8A8FFFFFD19F8A8FD1AFF
%52FD22F827A8FD13FF7DFD10F852FFFFFD19F852FD1AFF27FD21F827A8FD
%15FF52FD10F8FFFFFD19F827FD19FFA8FD22F87DFD17FFFD10F87DFFFD1A
%F8A8FD18FF52FD21F852FD18FFA8FD0FF852FFFD1AF852FD18FF27FD21F8
%A8FD18FFA827FD0FF8FFFD1AF827FD17FFA8FD21F852FD1AFF27FD0FF8A8
%FD0DF827FD0DF8A8FD16FF52FD0CF827FD14F87DFD1AFF7DFD0FF87DFD0D
%F8277DFD0CF852FD16FF27FD0CF85227FD13F8FD1BFFA8FD0FF852FD0DF8
%277DFD0CF827FD15FFA8FD0CF827A8FD13F852FD1CFFFD0FF827FD0EF8FF
%27FD0CF8A8FD14FF52FD0CF87D7DFD13F87DFD1CFF27FD0EF827FD0EF8FF
%52FD0CF852FD14FF27FD0CF8A8A8FD13F8A8FD1CFF27FD1DF8FFA8FD0CF8
%27FD13FFA8FD0CF827FF7DFD12F827A8FD1CFFA8FD0F7DFD0EF8A8FF27FD
%0CF8A8FD12FF52FD0CF852FF7DFD13F8FD2DFFFD0EF8A8FF7DFD0CF852FD
%12FF27FD0CF8A8FF52FD12F827FD2DFFFD0EF8A8FF7DFD0CF827FD11FFA8
%FD0DF8FFFF7DFD12F827FD2DFFFD0EF8A8FFFF27FD0CF8A8FD10FF52FD0C
%F87DFFFF52FD12F87DFD2DFFFD0EF87DFFFF7DFD0CF852FD10FF27FD0CF8
%A8FFFF52FD12F852FD2DFFFD0EF8A8FFFFA8FD0CF827FD0FFFA8FD0CF827
%FFFFFF52FD12F87DFD2DFFFD0EF87DFFFFFFFD0DF8A8FD0EFF52FD0CF87D
%FFFFFF52FD12F87DFD2DFFFD0EF8A8FFFFFF7DFD0CF852FD0EFF27FD0CF8
%A8FFFFFF27FD12F8A8FD2DFFFD0EF87DFFFFFFA8FD0CF827FD0DFFA8FD0C
%F827FD04FF52FD12F87DFD2DFFFD0EF87DFD04FF27FD0CF8A8FD0CFF7DFD
%0CF87DFD04FF27FD12F87DFD2DFFFD0EF852FD04FF7DFD0CF852FD0CFF27
%FD0CF8A8FD04FF27FD12F87DFD2DFFFD0EF87DFD04FFA8FD0CF827FD0CFF
%FD0CF827FD05FF27FD12F87DFD2DFFFD0EF852FD05FF27FD0CF8A8FD0AFF
%52FD0CF87DFD05FF27FD12F87DFD2DFFFD0EF852FD05FF7DFD0CF852FD0A
%FF27FD0CF8A8FD05FFFD13F87DFD2DFFFD0EF827FD05FFA8FD0CF827FD09
%FFA8FD0CF827FD05FFA8FD13F87DFD2DFFFD0EF852FD06FF27FD0CF8A8FD
%08FF52FD0CF87DFD06FFFD13F8A8FD2DFFFD0EF827FD06FF7DFD0CF852FD
%08FF27FD0CF8A8FD05FFA8FD13F87DFD2DFFFD0EF852FD06FFA8FD0CF827
%FD07FFA8FD0CF827FD06FFA8FD13F87DFD2DFFFD0EF827FD07FF27FD0CF8
%A8FD06FF52FD0CF87DFD06FFA8FD13F87DFD2DFFFD0EF827FD07FF7DFD0C
%F852FD06FF27FD0BF827A8FD06FFA8FD13F87DFD2DFFFD0EF827FD07FFA8
%FD0CF827FD05FFA8FD0CF827FD07FF7DFD13F852FD2DFFFD0EF827FD08FF
%27FD0CF8A8FD04FF52FD0CF87DFD07FFA8FD13F87DFD2DFFFD0FF8FD08FF
%7DFD0CF852FD04FF27FD0CF8A8FD07FF7DFD13F827FD2DFFFD0EF827FD08
%FFA8FD0CF827FFFFFFA8FD0CF852FD08FFA8FD13F827FD2DFFFD0FF8FD09
%FF27FD0CF8A8FFFF52FD0CF87DFD08FF7DFD14F8FD2DFFFD0FF8A8FD08FF
%A8FD0CF852FFFF27FD0BF827A8FD08FF7DFD14F8A8FD1CFFA8527D527D7D
%7D527D7D7D52FD047DFD0FF8A8FD08FFA8FD0CF827FFA8FD0CF827FD09FF
%52FD14F87DFD1CFFFD1FF8A8FD09FF52FD0CF8FF7DFD0CF8A8FD09FF7DFD
%14F852FD1CFF27FD0EF827FD0FF8A8FD09FFA8FD0CF85252FD0CF8A8FD09
%FF52FD14F827FD1BFFA8FD0FF852FD0FF8A8FD09FFA827FD0BF827FD0CF8
%52FD0AFF52FD15F8FD1BFF7DFD0FF852FD0FF8A8FD0AFF27FD18F87DFD0A
%FF27FD15F852FD1AFF52FD0FF87DFD0FF8A8FD0AFFA8FD17F827FD0BFF52
%FD15F827FD1AFF27FD0FF8A8FD0FF8A8FD0AFFA827FD16F827FD0BFF52FD
%16F8A8FD18FF7DFD10F8FFFD0FF87DFD0BFF27FD16F8A8FD0BFF52FD16F8
%27FD18FF27FD0FF852FFFD0FF8A8FD0BFF7DFD15F827FD0CFF52FD17F852
%FD16FFA8FD10F87DFFFD0FF87DFD0BFFA827FD14F852FD0CFF52FD18F87D
%FD15FFFD11F8FFFFFD0FF8A8FD0CFF27FD14F8A8FD0CFF52FD19F87DFD12
%FFA8FD11F852FFFFFD0FF8A8FD0CFFA8FD13F827FD0DFF52FD1AF852FD10
%FFA8FD12F8A8FFFFFD0FF8A8FD0CFFA8FD13F852FD0DFF27FD1CF87DA8FD
%0BFF7D27FD12F827FFFFFFFD0FF8A8FD0DFF52FD12F8A8FD0DFF52FD1DF8
%27527D7DA87DA8A87D5252FD15F8FD04FFFD0FF8A8FD0DFF7DFD11F827FD
%0EFF52FD3CF87DFD04FFFD0FF87DFD0EFF27FD10F852FD0EFF52FD3BF827
%FD05FFFD0FF8A8FD0EFF52FD10F8A8FD0EFF52FD3BF8A8FD05FFFD0FF87D
%FD0EFFA8FD0FF827FD0FFF52FD3AF87DFD06FFFD0FF8A8FD0FFF27FD0EF8
%52FD0FFF52FD39F852FD07FFFD0FF8A8FD0FFF52FD0EF8A8FD0FFF52FD38
%F852FD08FFFD0FF8A8FD0FFFA8FD0DF827FD10FF27FD0EF827FD28F852FD
%09FFFD0FF8A8FD10FF27FD0CF852FD10FF52FD0EF827FF27FD24F8277DFD
%0AFFFD0FF8A8FD10FF52FD0CF8A8FD10FF52FD0EF827FFFF52FD22F852A8
%FD0BFFFD0FF87DFD10FFA8FD0BF827FD11FF52FD0EF827FFFFFFA827FD1E
%F827A8FD0DFFFD0FF8A8FD11FF27FD0AF852FD11FF27FD0EF827FD05FF7D
%27FD1AF82752FD0FFF7D527DFD07527D527D527DA8FD11FFA87D527D527D
%527D527D52FD12FFA8527D527D527D527D527D527D527D7DFD07FF7D52FD
%15F82752A8FD69FF7D5227FD0EF852527DA8FD6FFFA8FD047D52FD047DA8
%A8FD97FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Flare.aip)
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
0 O
0 g
0 J 0 j 1 w 10 M []0 d0 XR
1062.301 817.0323 m
1021.8457 817.0354 981.3904 817.0373 940.935 817.0247 c
939.7435 817.0242 938.0414 817.3196 937.4782 816.6816 c
936.5934 815.6793 936.3349 814.0247 936.0781 812.5983 c
935.8643 811.4109 936.0342 810.1544 936.0342 808.9285 c
936.0342 807.3522 936.4579 805.6247 935.9582 804.2271 c
934.1541 799.1815 934.1053 793.83 933.0165 788.6647 c
932.2016 784.7991 931.2319 780.9644 930.2152 777.1753 c
928.1134 769.3416 924.9765 761.8365 921.2767 754.6254 c
917.4838 747.2325 913.183 740.1061 907.2474 734.1758 c
903.8486 730.7802 900.4653 727.4009 896.642 724.39 c
890.1157 719.2501 882.725 715.7374 875.4343 712.0533 c
872.1494 710.3934 868.2376 710.0231 864.7255 708.7497 c
861.0213 707.4066 857.1653 706.7007 853.384 705.7248 c
849.7182 704.7786 845.8391 703.884 842.1843 703.7807 c
837.0238 703.6348 832.0187 702.2067 826.8643 702.4893 c
817.3837 703.0093 807.8273 701.3793 798.3997 703.5281 c
796.1262 704.0463 793.8457 703.342 791.3911 704.3762 c
789.2797 705.2659 786.5139 705.019 784.0195 705.5638 c
776.3461 707.2396 768.9981 709.7892 761.8705 713.0126 c
752.2408 717.3676 743.6522 723.2798 736.0803 730.6492 c
733.3264 733.3295 730.1854 735.7822 728.0718 738.9131 c
724.3091 744.4871 720.246 749.8607 716.948 755.7939 c
715.2064 758.9271 713.3836 762.0598 712.0247 765.3384 c
710.6644 768.6199 709.0114 771.7641 707.8749 775.1884 c
705.5746 782.1192 703.058 788.9749 701.1402 796.0329 c
699.8989 800.601 698.7426 805.1987 697.6035 809.7841 c
696.4014 814.6234 696.4225 819.7631 695.2636 824.6174 c
694.5786 827.4874 694.9846 830.4692 694.1362 833.0781 c
693.5298 834.943 693.1026 836.7319 693.3799 838.4733 c
693.7322 840.6845 692.244 842.3156 692.2042 844.3568 c
692.1317 848.0822 692.9014 851.902 691.186 855.4808 C
691.9455 862.224 690.1094 868.829 690.1266 875.5359 c
690.1572 887.4448 690.1352 899.3538 690.1352 911.2628 c
690.1352 923.1717 689.96 935.0839 690.1848 946.9886 c
690.4069 958.7538 689.1842 970.5534 691.1351 982.2896 c
691.8297 986.4677 690.8426 990.7164 692.0486 995.0333 c
693.02 998.5104 691.9601 1002.4546 693.2374 1006.1216 c
694.0001 1008.3118 692.7498 1010.67 694.1511 1013.1311 c
695.1783 1014.9354 694.9067 1017.6847 695.1937 1019.9691 c
695.9836 1026.2576 697.254 1032.4211 698.5156 1038.6091 c
699.5006 1043.4402 701.116 1048.101 701.9036 1053.0066 c
702.4576 1056.4565 704.2902 1059.6929 705.4744 1063.052 c
706.7146 1066.5695 707.7364 1070.1687 709.0868 1073.6414 c
710.3755 1076.9553 713.0331 1079.6908 713.2874 1083.4592 C
716.6505 1087.168 717.9144 1092.1154 720.7382 1096.1287 c
723.6156 1100.2183 726.3019 1104.5295 729.7149 1108.135 c
735.2985 1114.0332 740.7327 1120.1597 747.4137 1124.9138 c
750.5029 1127.1121 753.5131 1129.5728 756.913 1131.1528 c
765.1354 1134.9739 773.2615 1138.926 782.2411 1141.1117 c
788.6852 1142.6802 795.1788 1143.9045 801.6742 1144.725 c
808.0522 1145.5305 814.6177 1145.0752 821.0898 1144.8508 c
827.4271 1144.6313 833.7338 1145.3374 840.1373 1144.0569 c
844.8343 1143.1177 849.693 1142.4443 854.4798 1141.9089 c
859.6451 1141.3311 864.2299 1138.6962 869.4027 1138.4979 C
875.6964 1135.1318 882.5495 1133.0798 888.7382 1129.2935 c
897.1421 1124.1521 905.4745 1116.8174 911.3481 1109.252 c
916.5234 1102.5857 921.0971 1095.6301 924.3055 1087.8057 c
926.9612 1081.3291 928.9666 1074.6638 930.9778 1067.955 c
933.3134 1060.1639 934.4583 1052.1991 935.841 1044.2939 c
936.6185 1039.8488 937.6988 1035.269 937.1569 1030.5691 c
936.8622 1028.0128 937.8447 1027.3053 940.416 1027.2104 c
941.2903 1027.1781 942.1671 1027.2053 943.0427 1027.2053 c
982.2722 1027.2053 1021.5016 1027.2053 1060.7311 1027.2053 c
1062.2426 1027.2053 1063.754 1027.2053 1065.3939 1027.2053 C
1065.0242 1030.3638 1065.4641 1032.9709 1064.4014 1035.718 c
1063.4141 1038.2699 1063.9165 1041.3159 1063.4181 1044.1912 c
1062.6243 1048.772 1061.9706 1053.3992 1061.1748 1058.0071 c
1060.2458 1063.3843 1059.2233 1068.7253 1057.9458 1074.027 c
1057.1755 1077.2227 1056.8835 1080.582 1055.7323 1083.6238 c
1054.5781 1086.6732 1053.644 1089.8325 1052.8435 1092.9084 c
1050.3774 1102.3845 1046.8389 1111.5039 1042.8179 1120.293 c
1038.915 1128.8231 1034.6086 1137.2439 1029.8289 1145.4237 c
1023.2496 1156.6829 1015.8665 1167.3429 1007.2136 1176.9319 c
999.6838 1185.2764 991.7681 1193.3635 983.011 1200.5952 c
977.0425 1205.5244 970.9448 1210.2297 964.5562 1214.5396 c
958.8746 1218.3724 953.1363 1222.1377 946.8629 1225.0554 c
940.4008 1228.0607 934.2722 1231.7649 927.55 1234.25 c
925.2784 1235.0898 923.1651 1236.3523 920.9041 1237.2267 c
918.6365 1238.1035 916.2485 1238.6641 913.9593 1239.4905 c
906.5789 1242.155 899.1602 1244.6656 891.3547 1245.8005 C
887.9138 1248.0342 883.7664 1247.6855 880.0036 1248.7998 c
876.2369 1249.915 872.1628 1249.9679 868.2889 1250.9762 c
866.5009 1251.4417 864.2911 1250.7439 862.7314 1251.5089 c
860.9643 1252.3757 859.3301 1252.1123 857.712 1252.0055 c
855.7458 1251.8757 854.1382 1252.9644 852.3589 1253.0835 c
845.1573 1253.5654 837.9428 1253.8647 830.7307 1254.1738 c
828.4581 1254.2712 826.1779 1254.189 823.9012 1254.189 c
817.5964 1254.189 811.288 1254.3257 804.9881 1254.1506 c
798.6484 1253.9746 792.3176 1253.4863 785.9825 1253.142 c
785.4587 1253.1135 784.7047 1253.3635 784.4442 1253.1008 c
783.0142 1251.6582 781.2365 1252.2803 779.5912 1252.0619 c
777.795 1251.8235 776.0024 1251.0043 774.2481 1251.1086 c
769.1016 1251.4148 764.4416 1248.7473 759.3525 1248.9348 C
750.8531 1246.0708 741.9899 1244.5261 733.4839 1241.6343 c
723.9562 1238.3948 714.7624 1234.4208 705.5883 1230.324 c
698.5737 1227.1917 692.428 1222.5175 685.3846 1219.4893 C
683.9286 1217.2083 681.1206 1216.991 679.183 1215.4191 c
676.0552 1212.8813 672.9658 1210.2639 669.6262 1208.0298 c
666.8387 1206.1652 664.0707 1204.3503 661.5885 1202.0614 c
659.1019 1199.7683 656.3713 1197.7363 653.2373 1195.2341 C
653.2373 1195.2543 653.2373 1195.2743 653.2373 1195.2944 C
653.2238 1195.2888 653.2029 1195.2837 653.1873 1195.2783 C
653.1379 1210.0798 653.1378 1224.7356 653.1378 1239.375 C
652.5826 1239.4211 652.2447 1239.4736 651.9067 1239.4736 c
598.6667 1239.4773 545.4268 1239.4771 492.1868 1239.4771 c
491.6614 1239.4771 491.1354 1239.4592 490.6108 1239.4802 c
488.5911 1239.5613 487.3407 1238.9147 487.267 1236.5912 c
487.2322 1235.5002 486.6365 1234.4222 486.2677 1233.3479 c
482.846 1223.3818 479.1541 1213.4988 476.0788 1203.4272 c
473.7535 1195.8116 470.8935 1188.3997 468.3809 1180.8601 c
464.6907 1169.7869 460.7455 1158.7985 457.0757 1147.7188 c
454.3228 1139.4075 451.5664 1131.1082 448.6148 1122.8596 c
445.8328 1115.0852 443.4321 1107.1144 440.8749 1099.2428 c
439.0369 1093.5848 437.0038 1087.9016 434.9676 1082.2778 c
432.9886 1076.8119 431.4774 1071.1066 429.4402 1065.6396 c
427.3485 1060.0266 425.1968 1054.4014 423.3892 1048.7241 c
420.7291 1040.3695 417.8561 1032.0935 415.0884 1023.7786 c
412.3239 1015.4731 409.6489 1007.1557 406.5477 998.9486 c
402.1352 987.2709 398.7207 975.2172 394.8391 963.3374 c
392.016 954.6974 389.438 945.9349 386.2252 937.4765 c
382.8804 928.6705 380.0945 919.7053 376.9991 910.8337 c
373.1535 899.8124 369.4227 888.751 365.6677 877.6982 c
363.1114 870.1738 360.6188 862.6278 358.0614 855.1038 c
354.6702 845.1264 350.9056 835.2606 347.9335 825.1608 c
345.3168 816.2686 341.3776 807.8603 339.0574 798.8632 c
337.6937 793.5746 335.3977 788.5264 333.431 783.123 C
331.6009 788.6682 329.9036 793.9168 328.1365 799.1419 c
325.1761 807.8961 322.1862 816.6405 319.1804 825.3794 c
316.4919 833.196 313.7332 840.9885 311.0641 848.8116 c
308.1316 857.4071 305.2863 866.0322 302.3657 874.6318 c
299.3419 883.5351 296.0654 892.3588 293.2883 901.3375 c
290.937 908.9393 288.086 916.3542 285.5513 923.8843 c
282.1891 933.8732 278.7723 943.8436 275.3967 953.828 c
273.1631 960.4348 270.9947 967.0637 268.7337 973.661 c
266.7902 979.3323 264.6906 984.9504 262.7787 990.632 c
259.9352 999.0824 257.4584 1007.65 254.0838 1015.928 c
252.1286 1020.7242 250.5753 1025.6954 249.0403 1030.6497 c
244.8157 1044.2844 239.7918 1057.6445 235.2399 1071.1606 c
229.7537 1087.4509 224.5018 1103.8167 218.5867 1119.9626 c
216.2999 1126.2046 214.2648 1132.5427 212.265 1138.8844 c
210.2648 1145.2275 208.0212 1151.4758 205.7881 1157.7395 c
200.3448 1173.0074 195.814 1188.5842 190.0236 1203.7515 c
186.0349 1214.1992 182.9051 1224.9758 179.4322 1235.6188 c
178.1846 1239.4418 178.239 1239.4746 174.4792 1239.4749 c
121.9398 1239.4783 69.4004 1239.4779 16.861 1239.47 c
16.0483 1239.4698 15.2357 1239.3628 14.6061 1239.3186 C
14.6061 1029.0262 14.6061 819.0913 14.6061 609.1644 C
30.7583 608.4058 135.0842 608.7134 139.4894 609.5242 C
139.4894 662.9392 139.4894 716.3543 139.4894 769.7694 c
139.4894 775.0233 139.5857 780.2795 139.4625 785.5306 c
139.3384 790.8243 139.3463 796.0779 138.6395 801.4098 c
137.5114 809.9206 138.8524 818.5924 137.5465 827.2416 c
136.3698 835.0356 137.6377 843.0099 136.545 850.9789 c
135.357 859.6429 136.6885 868.5201 135.416 877.329 c
134.2872 885.1434 135.6294 893.0966 134.4482 901.0746 c
133.168 909.7225 134.6234 918.6061 133.3336 927.4247 c
132.1667 935.4027 133.5544 943.5477 132.3268 951.6904 c
131.1012 959.819 132.465 968.1681 131.2433 976.4684 c
130.0441 984.6165 131.6069 992.9512 130.2184 1001.2596 c
129.2503 1007.0523 130.329 1013.1566 129.9473 1019.0864 c
129.5734 1024.896 128.9056 1030.6699 128.9021 1036.52 c
128.8993 1041.2759 129.9491 1046.16 127.9301 1050.7958 C
127.9301 1057.9319 127.9301 1065.0681 127.9301 1072.4329 C
128.5146 1072.0983 128.8939 1072.0153 128.96 1071.824 c
132.1365 1062.6304 135.3161 1053.4374 138.4285 1044.2217 c
140.6608 1037.6117 142.353 1030.7793 145.0854 1024.3877 c
149.0488 1015.1168 151.4131 1005.3185 155.1993 996.0016 c
157.3974 990.5927 158.6357 984.7831 160.7709 979.3915 c
162.6293 974.6987 164.1614 969.9368 165.7791 965.1807 c
167.448 960.2739 169.2961 955.4284 171.007 950.5355 c
173.2574 944.0995 175.184 937.5268 177.5364 931.1634 c
179.3376 926.2909 180.8815 921.3466 182.6381 916.4702 c
184.395 911.593 186.0911 906.6923 187.8856 901.832 c
190.1931 895.5822 191.8931 889.1152 194.3004 882.9465 c
196.1945 878.093 197.7615 873.1721 199.4478 868.2657 c
201.1842 863.2131 202.9853 858.174 204.842 853.164 c
207.1008 847.0693 208.5491 840.6464 211.1128 834.7514 c
215.1364 825.4991 217.7708 815.794 221.2415 806.3787 c
225.6088 794.5315 229.9154 782.6153 233.6588 770.5425 c
235.4399 764.798 237.808 759.2794 239.4847 753.4866 c
241.011 748.2134 242.666 742.8716 244.7668 737.8303 c
246.7818 732.9948 248.1196 728.0067 249.8925 723.1371 c
251.6663 718.265 253.2985 713.3396 255.1406 708.4996 c
257.4514 702.4275 258.9124 696.036 261.4962 690.1208 c
265.5303 680.8851 267.7766 671.0613 271.6998 661.7688 c
275.0217 653.9006 277.0233 645.4641 280.1974 637.4463 c
283.4765 629.1635 285.9086 620.5455 288.71 612.0736 c
289.6468 609.2404 289.9673 608.9714 292.8314 608.9707 c
319.8016 608.9641 346.7718 608.9654 373.742 608.9691 c
375.9905 608.9694 375.6818 609.1733 377.2211 611.6987 c
378.8867 614.4316 379.4648 617.4438 380.4774 620.3485 c
382.8248 627.0826 385.087 633.8474 387.5095 640.5543 c
389.8267 646.97 391.4487 653.6767 394.0439 659.9128 c
397.5442 668.3239 399.814 677.118 403.1962 685.5435 c
405.7338 691.8649 407.3353 698.5613 409.742 704.9059 c
411.5872 709.7698 413.1893 714.6835 414.8767 719.5897 c
416.6141 724.6413 418.4351 729.6719 420.2758 734.689 c
422.179 739.8767 423.5468 745.2753 425.6385 750.329 c
426.9292 753.4473 428.1082 756.6939 429.3304 759.8284 c
430.5517 762.9603 431.4542 766.2886 432.6467 769.4913 c
433.8349 772.6826 434.7158 775.9871 435.8427 779.2029 c
438.0978 785.6388 440.6071 791.9902 442.1466 798.6575 C
445.0341 802.3651 445.7808 807.0491 447.1064 811.2896 c
448.5126 815.7876 450.2326 820.1922 451.7193 824.65 c
453.8737 831.1097 455.6067 837.7605 458.2462 844.0017 c
462.1732 853.2877 464.7254 863.0162 468.321 872.4015 c
472.3204 882.8405 475.7692 893.4961 479.2535 904.1244 c
481.1738 909.9821 483.547 915.6676 485.3662 921.5745 c
486.9856 926.8325 488.5647 932.1873 490.6654 937.2289 c
492.6802 942.0643 494.0267 947.0489 495.7899 951.9226 c
497.5534 956.7977 499.2314 961.7052 501.0403 966.5596 c
502.9702 971.7386 504.1485 977.2321 506.3865 982.2006 c
510.5342 991.4087 513.0612 1001.1525 516.5386 1010.5662 c
520.914 1022.4108 525.1804 1034.3391 528.9639 1046.3984 c
530.7637 1052.135 533.2332 1057.6116 534.8629 1063.4348 c
535.9893 1067.4594 537.0712 1071.7589 539.6573 1075.3776 C
539.5651 1073.6111 538.9354 1071.9299 538.8553 1070.2229 c
538.444 1061.4395 539.1696 1052.6604 537.9074 1043.8442 c
536.7645 1035.8613 538.1235 1027.72 536.9041 1019.5779 c
535.6865 1011.448 537.0187 1003.1006 535.8253 994.7995 c
534.6537 986.6499 535.9647 978.325 534.7995 970.0129 c
533.6091 961.5211 534.9646 952.8273 533.7087 944.1833 c
532.5494 936.2042 534.1586 928.0386 532.6731 919.9166 c
531.7742 915.0022 532.6443 909.7845 532.4693 904.7117 c
532.2929 899.5969 531.812 894.4924 531.4554 889.384 c
531.0259 883.2288 531.9183 877.0864 530.5941 870.8649 c
529.6312 866.3413 530.1555 861.4308 530.4765 856.7241 c
530.7959 852.0429 529.6091 847.5605 529.3469 842.9694 c
528.9151 835.4122 529.9719 827.8532 528.4694 820.2543 c
527.5696 815.7036 528.012 810.8066 528.3849 806.1077 c
528.7713 801.2394 527.2429 796.6152 527.244 791.8255 c
527.2583 732.6311 527.2534 673.4367 527.2534 614.2422 c
527.2534 612.5319 527.2534 610.8215 527.2534 609.0652 C
569.4155 609.0652 611.2213 609.0652 653.3554 609.0652 C
653.3554 610.5153 653.3554 611.8731 653.3554 613.231 c
653.3554 624.9648 653.3507 636.6985 653.3729 648.4323 c
653.3738 648.9011 653.6481 649.7745 653.7656 649.7694 c
654.3698 649.7437 655.1109 649.6619 655.539 649.2924 c
658.7801 646.4935 661.9106 643.5655 665.1763 640.7965 c
667.0819 639.1809 669.0908 637.6553 671.1954 636.3121 c
678.6461 631.5569 685.5999 625.9744 693.8699 622.5711 C
699.6261 617.4548 707.5289 616.4376 713.7352 612.1777 c
713.8573 612.0938 714.075 612.165 714.2327 612.1151 c
721.0344 609.9624 727.6075 607.153 734.4452 605.0998 c
736.9302 604.3536 739.321 603.143 741.8507 602.725 c
749.1921 601.5116 756.2094 598.6506 763.7419 598.4583 C
768.845 596.1821 774.4942 596.8146 779.8149 595.4669 c
783.3364 594.5749 787.183 595.0982 790.9276 594.4217 c
794.9979 593.6863 799.3095 594.3916 803.5053 594.2167 c
807.7457 594.0399 811.9709 593.52 816.2078 593.2218 c
817.7762 593.1115 819.3743 593.0676 820.9306 593.2437 c
822.3827 593.408 823.7825 594.1185 825.2308 594.2187 c
832.4325 594.7173 839.7006 593.3761 846.8748 595.2473 c
849.7835 596.006 852.8303 594.9626 855.9534 596.1705 c
858.6379 597.2087 861.8932 596.6857 864.9387 597.1957 c
869.5292 597.9645 874.1478 598.7683 878.7625 599.3632 c
883.0726 599.9187 887.2575 601.0857 891.4359 601.9648 c
897.098 603.156 902.7233 604.9907 908.2777 606.8456 c
916.885 609.7203 925.543 612.4945 933.7561 616.3644 c
946.4808 622.3603 958.7814 629.0193 970.3826 637.1565 c
979.2724 643.3918 987.4507 650.3569 995.47 657.538 c
1000.1994 661.773 1004.9066 666.1324 1008.6298 671.4484 c
1011.07 674.9326 1014.3125 677.8459 1017.0723 681.1191 c
1018.5663 682.8911 1019.8956 684.8218 1021.1365 686.7839 c
1025.8625 694.2564 1031.7167 701.045 1034.9296 709.4383 C
1039.9609 715.2395 1041.2543 722.9965 1045.3228 729.3015 C
1045.864 733.9175 1048.7192 737.7029 1049.8762 742.1397 c
1051.0632 746.6912 1052.632 751.1705 1054.0648 755.6456 c
1056.1218 762.0701 1057.3928 768.6271 1058.9781 775.1329 c
1059.3672 776.7296 1059.9501 778.3394 1059.9775 779.9511 c
1060.03 783.0126 1061.811 785.8394 1061.0854 788.972 C
1062.9006 790.8629 1061.2795 793.5546 1062.2758 795.2866 c
1063.6487 797.6737 1062.8533 799.9781 1063.1726 802.2891 c
1063.2676 802.9765 1062.9521 803.8005 1063.2249 804.3707 c
1065.1931 808.4875 1063.7887 812.7332 1064.3313 816.9434 C
1063.321 816.989 1062.811 817.0323 1062.301 817.0323 c
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
